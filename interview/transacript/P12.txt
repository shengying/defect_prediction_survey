1/ Testing 6年

2/ 缺陷预测这一研究不重要： a) 不管是否存在都需要全部测试； b) 项目迭代快，投入产出比可能不高； c) 测的时间不够多

3/ 预测缺陷的时机：在每个迭代后，国外项目4周一次迭代，国内一天可能有多个迭代。

输出的格式：
4/ 认为预测出数量，这样难度太大，精确性是否无法保证

多个阶段的使用：
5/ 开发前期，开发结束，单元测试结束后的提交；code review的阶段 。

预测的因素应该考虑：
6/ 开发人员的经验/能力、擅长的领域，以及代码的书写规范。
开发的经验/能力，代码的书写规范有关系，可以作为考虑。擅长的领域有关。

明显区分去其他工具：
7/ 具有和eclipse完全不同的功能，eclipse现在有一些功能，比如空指针判断等

需要能够对问题的针对性描述：
8/ 工具需要描述问题是什么

功能性缺陷的预测：
9/ 就是实现当中比设计文档描述的流程ABCDE，少了其中某一个流程。
功能性DEFECT的预测：一个流程图没有写完整，ABCD，需要和设计文档相吻合。


特殊情况的考虑，change相关的dependency识别：
10/ 可能change本身对应的代码没有漏洞，但依赖其的其他模块，可能会因为这个改变而出现defect。


11/ 体现区别性： 像eclipse一样，扫出来大致是问题是什么。和eclipse完全不同功能。

12/ 什么是好的change log?
commit的时候有精确的comments.

第一部分：统计问题询问
参见问卷调查
13/ QA总是可以获得： 程序源代码库，设计文档，版本控制系统历史数据，缺陷系统数据

14/ QA有时可以获得： 开发人员的电子邮件，包括对程序的交流和讨论

15/ QA从不获得： 开发人员和开发工具交互行为、代码审查历史数据，开发人员开发行为的社交网络信息（谁与谁有比较频繁的联系）

16/ QA希望是“一个完整功能”级别的粒度

17/ %75的检出率

第二部分：开放式问题 - 试图了解，什么是考虑使用缺陷预测工具的决定因素？

您认为，是什么因素决定您是否会考虑使用缺陷预测工具呢？
18/	1. （非功能性相关的change。） 非功能性的改动只能靠开发告诉QA，可能会影响到其他的功能；以change为单位，可能change本身没问题。
19/	2. 针对性的，问题到底是什么（工具需要能够告知缺陷的类型）
20/	3. 实用价值



 （参与项目的属性）输入：
从事的项目主要是什么形态的呢？新上的项目/长期维护和更新的项目/遗留项目，那个比例最高？
21/ 遗留系统，流程图是有的。



第三部分：
参见调查问卷
描述现在的一些研究方向，
22/ 强烈同意： 工具需要告知如何修补预测得到的缺陷

23/ 强烈同意： 工具需要能够预测出定位和修改缺陷需要投入的资源

24/ 不同意：  缺陷预测工具必须实时提供预测结果，即每一次代码发生变化时，都会进行预测。因为可能之后Dev还会有变化，代码并没有稳定下来。


第四部分：
感谢您的宝贵时间！