P4: （R2-P4） DEV = 3

R7: （R2-P3） DEV = 10

P5: （R2-P2） DEV = 10

P6: （R2-P1） DEV = 11

Factor: 有现成的工具，有实际使用的成功案例吗。

算法： 可以考虑需求的预测，就是说，某些特征在不同的需求下，被认为是bug的经验其实不同的。

团队规模： P4 大团队 40 - 小团队 10 | P1/P2 大团队 30 小团队 4~7 | P3 小团队 < 10 

工作职责： P2　task resource allocation + code review + mentor + requirement clarification + interview
P1: PM + BA + Architect + Technical Leader + QA + DEV

参与项目：　
C++ (Research - PoC), Java (重构), C# (从0开始 & 遗留项目开发维护)
C++ （0） C#(从0 & 维护) Java（维护）
Java，.NET
C#(从0) Java（从0） hybrid(Research - PoC 业务验证) iOS

历史数据可用性：
短期research项目，没有track bug;
重构项目，比较成熟的系统，使用邮件来track bug;
使用JIRA(需求和bug的tracking);
没有上传到BugZilla;

Factor：
长期项目才有可能需要购买工具，6个月的项目不需要这样的工具。
专业的QA团队。
【和R3重复】具有业界标杆数据，说明确实有效。
准确率。
节省测试周期。
给Testing以建设性的导向。
前期准备不能复杂、不能花费很长时间、不必准备很多文档。
用户体验。
成本，投入产出比。
开源虽然前期没有购买成本，但后续的维护和学习会花更多的时间。

是否听说：
P1 - David讲座
P3 - 上网的时候看见过

广告：
P1 P2 P4： 对广告非常反感。
P3 - 如果的确碰到相似的应用场景，可能会点击。

有细节的广告：
在项目中评估 + 他人的使用效果 + 应用场景

场景二、三 同事推荐：
P2 P3 熟悉的人推荐，有细节会增加可能性，可能会尝试一下。
P4认为同事推荐无效，比较愿意用简单的例子，测试工具的精确性。

场景四 上级推荐：
需要上级是技术权威。

场景五 stackoverflow：
仍然需要评估

代码审查和测试的时间比例:
P4 代码审查所占比例 10%：交叉review + high level review，测试 10%
P2 代码审查 5%，测试 30%
P3 质量要求比较高的一个项目： 代码审查 20%，测试 40%

准备工作：
P4： 在code review之前做的准备工作 - 熟悉需求、unit testing、自测

期待输出：
P2: 按需求的优先级来排列code review的优先级；新增功能，被影响的模块。

期待输出：
P1: 业务复杂度；方法的长度；改动多的文件；private方法比较容易出问题。

code reviewer的工作：
可能每天有5K-6K代码需要code review，才有可能需要工具辅助。

粒度：
在每一个commit提交之前，都需要做code review；找一个级别比他高的人，来code reivew。
在release之前，把所有change一起看一遍，模块级别。

code review性能衡量：
testing过程中发现的很多bug，就是code review的失败。

Factor:
P4: 相对优势（好处在哪里） > 兼容性(开发语言) > 可试用性 (step by step) > 可重创性 > 复杂度
P3: 复杂度（额外花精力做research） > 相对优势 > 可试用性（帮助更快的了解） > 兼容性(架环境并不复杂) > 可重创性 
P1: 投入产出比、相对优势(产生效果) > 兼容性 > 可试用性 > 复杂度  > 可重创性

精确性： 不能白做工

精确性： P1: 10%的代码（人工就可以排除40%-50%），P2: 30%-40%的代码; P4: 精确度（bug发现度）优先级大于误报率。
